generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model chama {
  id             Int              @id @unique @default(autoincrement())
  name           String           @unique @db.VarChar(200)
  description    String
  location       String           @db.VarChar(200)
  address        String           @db.VarChar(150)
  certificate    String?          @unique @db.VarChar(150)
  date_created   DateTime         @default(now())
  deleted        Int              @default(0)
  user_has_chama user_has_chama[]
}

model sacco {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(150)
  description String?
}

model user {
  id             Int              @id @unique @default(autoincrement())
  firstname      String           @db.VarChar(50)
  othernames     String           @db.VarChar(50)
  gender         String           @db.VarChar(50)
  dob            DateTime         @db.Date
  idNum          String           @unique @db.VarChar(50)
  idFileUrl      String           @db.VarChar(200)
  email          String           @db.VarChar(50)
  phone1         String           @db.VarChar(50)
  phone2         String?          @db.VarChar(45)
  password       String           @db.VarChar(200)
  create_time    DateTime?        @default(now())
  isAdmin        Int?
  deleted        Int?             @default(0)
  user_has_chama user_has_chama[]
}

model user_has_chama {
  user_id      Int
  chama_id     Int
  status       String    @db.VarChar(45)
  wallet_label String?   @db.VarChar(45)
  create_time  DateTime? @default(now())
  update_time  DateTime? @default(now())
  chama        chama     @relation(fields: [chama_id], references: [id], onDelete: Cascade)
  user         user      @relation(fields: [user_id], references: [id])

  @@id([user_id, chama_id])
  @@index([chama_id])
  @@index([user_id])
}
